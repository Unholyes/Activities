#include<stdio.h>
#include<stdlib.h>

typedef struct {
 int* arr;
 int rear;
 int front;
} Queue;

Queue* createQueue();
void enqueue(Queue* queue, int data);
int dequeue(Queue* queue);
int front(Queue* queue);
int isEmpty(Queue* queue);
void printQueue(Queue* queue);

int main(void) {
 
 Queue* queue = createQueue();
 
 int selection, data;
 int nodeToInsert;
 
 do {
  printf("\nPlease select an operation:");
  printf("\n[1] Print Queue");
  printf("\n[2] Enqueue");
  printf("\n[3] Dequeue");
  printf("\n[4] View Front");
  printf("\n[5] Exit Program\n");
  
  printf("\nEnter seletion: ");
  scanf("%d", &selection);
  switch(selection) {
   case 1: 
    if(isEmpty(queue)) {
     printf("\nQueue is currently empty.\n");
    } else {
     printQueue(queue);
    }
    break;
   case 2:
    printf("\nEnter value of node: ");
    scanf("%d", &data);
    enqueue(queue, data);
    break;
   case 3:
    if(isEmpty(queue)) {
     printf("\nAborted operation. Queue is currently empty.\n");
    } else { 
     printf("\nSuccessfully deleted node with the value of: %d\n", dequeue(queue));
    }
    break;
   case 4:
    if(isEmpty(queue)) {
     printf("\nAborted operation. Queue is currently empty.\n");
    } else {
     printf("\nValue at the front of the Queue: %d\n", front(queue));
    }
    break;
   case 5:
    printf("\nByers!");
    break;
  } 
 }while(selection != 5);
 
 
 return 0;
}

Queue* createQueue() {
    Queue* queue = (Queue*) malloc(sizeof(Queue));
    queue->arr = (int*) malloc(sizeof(int));
    queue->front = 0;
    queue->rear = -1;
    return queue;
}

void enqueue(Queue* queue, int data) {
    queue->rear++;
    queue->arr[queue->rear] = data;
    queue->arr = realloc(queue->arr, ((queue->rear)+2)*sizeof(int));
}

int dequeue(Queue* queue) {
    int data = queue->arr[queue->front];
    for(int i=0; i<queue->rear; i++) {
        queue->arr[i] = queue->arr[i+1];
    }
    queue->rear--;
    return data;
}

int front(Queue* queue) {
 return queue->arr[queue->front];
}

int isEmpty(Queue* queue) {
 return queue->rear == -1;
}

void printQueue(Queue* queue) {
 printf("\n\nValues in Queue: [ ");
 
 for(int i=0; i<=queue->rear; i++) {
        printf("%d ", queue->arr[i]);
    }
 printf("]\n");
}
